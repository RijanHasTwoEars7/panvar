#!/usr/bin/env Rscript
args = commandArgs(trailingOnly=TRUE)

##Package LOAD / INSTALL FUNCTION

LibraryCheckerInstaller <- function(x){
  for( i in x ){
    #  require returns TRUE invisibly if it was able to load package
    if( ! require( i , character.only = TRUE ) ){
      #  If package was not able to be loaded then re-install
      install.packages( i , dependencies = TRUE, repos='http://cran.us.r-project.org')
      #  Load package after installing
      require( i , character.only = TRUE )
    }
  }
}

##Load libraries
LibraryCheckerInstaller(c("ggplot2", "dplyr", "reshape2", "tidyr", "gtable", "patchwork", "stringr", 
                           "gridExtra", "grid", "feather"))



##Load resource files - MODIFY TO FIT DESIRED SPECIES
##FOR TEXT FILES ONLY
#gene_db <- read.table("../../../resources/R_resources/Sviridis_311_v1.1.gene.gff_for_gene_models.txt", sep = "\t", header = T)
#annotation_db <- read.csv("../../../resources/R_resources/Sbicolor_454_v3.1.1.annotation_info.csv", header = T))

##For FEATHER data bases
gene_db <- as.data.frame(read_feather("../../resources/R_resources/G2g_ggf_Svirids.feather"))

annotation_db <- as.data.frame(read_feather("../../resources/R_resources/G2g_Svirids_anno.feather"))

##If there is a trailing transcript identifier/genome version that needs to be removed
##Setaria = ".v1.1"

transcript_trailer_to_remove <- ".v1.1"

##Transcript Identifer - For grabbing individual genes from transcript IDs ## '$' denotes trailing number
##Setaria = "\\.[1-9]$"

individual_transcript_identifier <- "\\.[1-9]$"

##Plot specific names
population_name <- "Setaria Diversity Panel"






#####BEGIN MODELS AND FUNCTIONS - DO NOT MODIFY######

##Make folders
dir.create("../../outputs")
dir.create("../../outputs/summary_tables")
dir.create("../../outputs/diversity_pdfs")

##process transcript ID to text
transcript_to_geneid <- function(transcript){
  print(transcript)
}

##gene model functions
single_gene_to_model <- function(gene_id) {
  ##define target gene
  target_gene <- gene_id
  base_gene <- gsub(target_gene,pattern = individual_transcript_identifier, replacement = "")
  
  ##define the gene bounds
  gene_bounds <- subset(gene_db, GeneID == base_gene)
  gene_bounds$gene_number <- as.factor(1:nrow(gene_bounds))
  expand_factor <- (gene_bounds$Stop - gene_bounds$Start) * .025
  gene_bounds$Start1 <- round(gene_bounds$Start - expand_factor)
  gene_bounds$Stop1 <- round(gene_bounds$Stop + expand_factor)
  gene_bounds$Start <- NULL
  gene_bounds$Stop <- NULL
  gene_bounds$Strand <- lapply(gene_bounds$Strand, function(x) { gsub("\\-", "first", x) })
  gene_bounds$Strand <- lapply(gene_bounds$Strand, function(x) { gsub("\\+", "last", x) })
  gene_bounds$Chr <- NULL
  
  ##Melt gene info for ggplot
  gene_space <- melt(gene_bounds, id.vars = c("GeneID", "Chrom", "Type", "Strand", "gene_number"))

  ##Define exon boundries
  exons_bounds <- subset(gene_db, Type == "CDS" & GeneID == target_gene)
  exons_bounds$observation <- as.factor(1:nrow(exons_bounds))
  exons_bounds$exon_label <- paste(exons_bounds$Type,exons_bounds$observation)
  exons_bounds$y1 <- .98
  exons_bounds$y2 <- 1.02
  
  ##Define 5'UTR
  five_prime_bounds <- gene_db %>% filter(Type == "five_prime_UTR" & GeneID == target_gene)
  
  if(nrow(five_prime_bounds)>=1){
    five_prime_bounds$y1 <- .98 
    five_prime_bounds$y2 <- 1.02 
    five_prime_status <- TRUE
  } else{
    five_prime_status <- FALSE
  }
  
  ##Define 3'UTR
  three_prime_bounds <- gene_db %>% filter(Type == "three_prime_UTR" & GeneID == target_gene)
  
  if(nrow(three_prime_bounds)>=1){
    three_prime_bounds$y1 <- .98 
    three_prime_bounds$y2 <- 1.02 
    three_prime_status <- TRUE
  } else{
    three_prime_status <- FALSE
  }
  
  ##Define X-axis
  
  gene_xlabel <- paste("Position on ", gene_bounds$Chrom,sep = "")
  
  ##convery gene_number to numeric
  gene_space$gene_number=as.numeric(levels(gene_space$gene_number))[gene_space$gene_number]
  ##Draw graph
  gene_model <- ggplot(data=gene_space, aes(x=value, y=gene_number, group=GeneID)) +
    geom_line(arrow = arrow(length=unit(0.30,"cm"), ends=paste(gene_bounds$Strand), type = "closed"), size = 1)+
    geom_point(alpha = 0.05) + scale_y_continuous(limits = c(.93, 1.07))
  
  gene_model <- gene_model + geom_rect(data=exons_bounds, inherit.aes=FALSE,
                                       aes(xmin=Start,xmax=Stop,ymin=y1,ymax=y2,
                                           group=exon_label), fill = "dodgerblue1") 
  
  ##Add 5' UTR if there is one
  if(five_prime_status==TRUE){
    gene_model <- gene_model + geom_rect(data=five_prime_bounds, inherit.aes=FALSE,
                                         aes(xmin=Start,xmax=Stop,ymin=y1,ymax=y2), fill = "chartreuse4") + xlab(gene_xlabel) +
      ggtitle(paste(target_gene)) +  theme(plot.title = element_text(hjust = 0.5)) +
      theme(axis.title.y=element_blank(),axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
      theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
            panel.background = element_blank(), axis.line.x = element_line(colour = "black"), 
            axis.line.y=element_blank())
    
  }
  
  ##Add 3' UTR if there is one
  if(three_prime_status==TRUE){
    gene_model <- gene_model + geom_rect(data=three_prime_bounds, inherit.aes=FALSE,
                                         aes(xmin=Start,xmax=Stop,ymin=y1,ymax=y2), fill = "orange2") + xlab(gene_xlabel) +
      ggtitle(paste(target_gene)) +  theme(plot.title = element_text(hjust = 0.5)) +
      theme(axis.title.y=element_blank(),axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
      theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
            panel.background = element_blank(), axis.line.x = element_line(colour = "black"), 
            axis.line.y=element_blank())+ 
      theme(axis.text=element_text(size=12),
            axis.title=element_text(size=14,face="bold"))
    
  }  
  
  if(three_prime_status == FALSE && five_prime_status == FALSE){
    gene_model <- gene_model + xlab(gene_xlabel) +
      ggtitle(paste(target_gene)) +  theme(plot.title = element_text(hjust = 0.5)) +
      theme(axis.title.y=element_blank(),axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
      theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
            panel.background = element_blank(), axis.line.x = element_line(colour = "black"), 
            axis.line.y=element_blank())+ 
      theme(axis.text=element_text(size=12),
            axis.title=element_text(size=14,face="bold"))
  }
  
  gene_model <- gene_model + theme(axis.text=element_text(size=14),
                                   axis.title=element_text(size=20,face="bold")) + 
  theme(plot.title = element_text(size=25, face ="bold"))
  
  return(gene_model)
}
single_gene_model_mutations <- function(gene_id){
  
  ##Create base model
  gene_model_diagram <- single_gene_to_model(gene_id)
  
  ##set graph limits for alternating mutations
  y_limits <- as.matrix(rep(c(.98, .96),10000))
  yend_limits <- as.matrix(rep(c(1.04, 1.02),10000))
  point_end_limits <- as.matrix(rep(c(1.04, .96),10000))
  
  ##Extract mutation data for gene of interest
  line_mutations <- mutation_db_filt %>% filter(ID == gene_id)
  
  ##Add locations for plotting mutations if available
  if(nrow(line_mutations)>=1){
    line_mutations <- cbind(line_mutations, y=y_limits[1:nrow(line_mutations),]) 
    line_mutations <- cbind(line_mutations, yend=yend_limits[1:nrow(line_mutations),])
    line_mutations <- cbind(line_mutations, point_end=point_end_limits[1:nrow(line_mutations),])
    line_mutations_status <- TRUE
  } else{
    line_mutations_status <- FALSE
  }
  
  #Create color scheme for mutation effect
  line_mutations$colors <- line_mutations$EFFECT
  line_mutations$colors <- gsub(line_mutations$colors, pattern = "HIGH", replacement = "orangered")
  line_mutations$colors <- gsub(line_mutations$colors, pattern = "MODERATE", replacement = "springgreen2")
  line_mutations$colors <- gsub(line_mutations$colors, pattern = "LOW", replacement = "gray60")
  
  ##Modify graph if there are mutations
  if(line_mutations_status == TRUE){
    gene_model_diagram <- gene_model_diagram + 
      geom_segment(data = line_mutations,  aes(x = POS, y = y, xend = POS, yend = yend), 
                   inherit.aes=FALSE, color = line_mutations$colors, size = .8) +
      geom_point(data = line_mutations, aes(x = POS, y = point_end), 
                 inherit.aes=FALSE, fill = line_mutations$colors, size=line_mutations$size, 
                 color = "black", alpha = .7, shape = line_mutations$shape)
  }
  
  gene_model_diagram <- gene_model_diagram + theme(axis.text=element_text(size=14),
                                                   axis.title=element_text(size=20,face="bold")) + theme(plot.title = element_text(size=25, face ="bold"))
  return(gene_model_diagram)
  
}


## tables
make_gene_mutation_table <- function(gene_id){
  
  
  mutation_db_filt_tables <- mutation_db_filt %>% filter(ID == paste(gene_id))
  
  mutation_table_db <- data.frame(Chromosome=mutation_db_filt_tables$CHROM, Position=mutation_db_filt_tables$POS,
                                  Reference=as.character(mutation_db_filt_tables$REF), Alternate=as.character(mutation_db_filt_tables$ALT),
                                  "Mutation_type"=as.character(mutation_db_filt_tables$TYPE), 
                                  "Predicted_effect" = as.factor(mutation_db_filt_tables$EFFECT),
                                  "Amino_acid_change" = as.character(mutation_db_filt_tables$AA_SUB),
                                  "Percent_Alternate" = paste(round(mutation_db_filt_tables$PER_ALT), "%", sep = ""))
  
  total_rows_per_page <- 25
  current_table_row <- 1
  current_page <- 1
  current_end_row <- 25
  total_pages <- ceiling(nrow(mutation_table_db) / 25)
  
  ##for single page
  if(total_pages == 1){
    
    table <- tableGrob(mutation_table_db[current_table_row:nrow(mutation_table_db),], rows = NULL, theme = ttheme_default(base_size = 8))
    title <- textGrob(paste(gene_id, " genic mutations within ", population_name, " (Page ", current_page, " of ",total_pages, ")", sep = ""),gp=gpar(fontsize=12, fontface = "bold"))
    footnote <- textGrob("", x=0, hjust=0,
                         gp=gpar( fontface="italic"))
    padding <- unit(0.5,"line")
    table <- gtable_add_rows(table, 
                             heights = grobHeight(title) + padding,
                             pos = 0)
    table <- gtable_add_rows(table, 
                             heights = grobHeight(footnote)+ padding)
    table <- gtable_add_grob(table, list(title, footnote),
                             t=c(1, nrow(table)), l=c(1,2), 
                             r=ncol(table))
    
    grid.newpage()
    return(grid.draw(table))
  } else if(total_pages == 2){
    
    table <- tableGrob(mutation_table_db[current_table_row:current_end_row,], rows = NULL, theme = ttheme_default(base_size = 8))
    title <- textGrob(paste(gene_id, " genic mutations within ", population_name, " (Page ", current_page, " of ",total_pages, ")", sep = ""),gp=gpar(fontsize=12, fontface = "bold"))
    footnote <- textGrob("", x=0, hjust=0,
                         gp=gpar( fontface="italic"))
    padding <- unit(0.5,"line")
    table <- gtable_add_rows(table, 
                             heights = grobHeight(title) + padding,
                             pos = 0)
    table <- gtable_add_rows(table, 
                             heights = grobHeight(footnote)+ padding)
    table <- gtable_add_grob(table, list(title, footnote),
                             t=c(1, nrow(table)), l=c(1,2), 
                             r=ncol(table))
    
    ##Last table
    current_page <- current_page + 1
    current_table_row <- current_table_row + 25
    current_end_row <- nrow(mutation_table_db)
    
    table_last <- tableGrob(mutation_table_db[current_table_row:current_end_row,], rows = NULL, theme = ttheme_default(base_size = 8))
    title_last <- textGrob(paste(gene_id, " genic mutations within ", population_name, " (Page ", current_page, " of ",total_pages, ")", sep = ""),gp=gpar(fontsize=12, fontface = "bold"))
    footnote <- textGrob("", x=0, hjust=0,
                         gp=gpar( fontface="italic"))
    padding <- unit(0.5,"line")
    table_last <- gtable_add_rows(table_last, 
                             heights = grobHeight(title_last) + padding,
                             pos = 0)
    table_last <- gtable_add_rows(table_last, 
                             heights = grobHeight(footnote)+ padding)
    table_last <- gtable_add_grob(table_last, list(title_last, footnote),
                             t=c(1, nrow(table_last)), l=c(1,2), 
                             r=ncol(table_last))
    
    grid.newpage()
    return(c(grid.draw(table), grid.newpage(), grid.draw(table_last)))
    
  } else if(total_pages ==3){
    
    table <- tableGrob(mutation_table_db[current_table_row:current_end_row,], rows = NULL, theme = ttheme_default(base_size = 8))
    title <- textGrob(paste(gene_id, " genic mutations within ", population_name, " (Page ", current_page, " of ",total_pages, ")", sep = ""),gp=gpar(fontsize=12, fontface = "bold"))
    footnote <- textGrob("", x=0, hjust=0,
                         gp=gpar( fontface="italic"))
    padding <- unit(0.5,"line")
    table <- gtable_add_rows(table, 
                             heights = grobHeight(title) + padding,
                             pos = 0)
    table <- gtable_add_rows(table, 
                             heights = grobHeight(footnote)+ padding)
    table <- gtable_add_grob(table, list(title, footnote),
                             t=c(1, nrow(table)), l=c(1,2), 
                             r=ncol(table))
    ##Second table
    current_page <- current_page + 1
    current_table_row <- current_table_row + 25
    current_end_row <- current_end_row + 25
    
    table2 <- tableGrob(mutation_table_db[current_table_row:current_end_row,], rows = NULL, theme = ttheme_default(base_size = 8))
    title2 <- textGrob(paste(gene_id, " genic mutations within ", population_name, " (Page ", current_page, " of ",total_pages, ")", sep = ""),gp=gpar(fontsize=12, fontface = "bold"))
    footnote <- textGrob("", x=0, hjust=0,
                         gp=gpar( fontface="italic"))
    padding <- unit(0.5,"line")
    table2 <- gtable_add_rows(table2, 
                             heights = grobHeight(title2) + padding,
                             pos = 0)
    table2 <- gtable_add_rows(table2, 
                             heights = grobHeight(footnote)+ padding)
    table2 <- gtable_add_grob(table2, list(title2, footnote),
                             t=c(1, nrow(table2)), l=c(1,2), 
                             r=ncol(table2))
    
    ##Last table
    current_page <- current_page + 1
    current_table_row <- current_table_row + 25
    current_end_row <- nrow(mutation_table_db)
    
    table_last <- tableGrob(mutation_table_db[current_table_row:current_end_row,], rows = NULL, theme = ttheme_default(base_size = 8))
    title_last <- textGrob(paste(gene_id, " genic mutations within ", population_name, " (Page ", current_page, " of ",total_pages, ")", sep = ""),gp=gpar(fontsize=12, fontface = "bold"))
    footnote <- textGrob("", x=0, hjust=0,
                         gp=gpar( fontface="italic"))
    padding <- unit(0.5,"line")
    table_last <- gtable_add_rows(table_last, 
                                  heights = grobHeight(title_last) + padding,
                                  pos = 0)
    table_last <- gtable_add_rows(table_last, 
                                  heights = grobHeight(footnote)+ padding)
    table_last <- gtable_add_grob(table_last, list(title_last, footnote),
                                  t=c(1, nrow(table_last)), l=c(1,2), 
                                  r=ncol(table_last))
    
    grid.newpage()
    return(c(grid.draw(table), grid.newpage(), grid.draw(table2), grid.newpage(), grid.draw(table_last)))
    
  } else if(total_pages == 4){
    
    table <- tableGrob(mutation_table_db[current_table_row:current_end_row,], rows = NULL, theme = ttheme_default(base_size = 8))
    title <- textGrob(paste(gene_id, " genic mutations within ", population_name, " (Page ", current_page, " of ",total_pages, ")", sep = ""),gp=gpar(fontsize=12, fontface = "bold"))
    footnote <- textGrob("", x=0, hjust=0,
                         gp=gpar( fontface="italic"))
    padding <- unit(0.5,"line")
    table <- gtable_add_rows(table, 
                             heights = grobHeight(title) + padding,
                             pos = 0)
    table <- gtable_add_rows(table, 
                             heights = grobHeight(footnote)+ padding)
    table <- gtable_add_grob(table, list(title, footnote),
                             t=c(1, nrow(table)), l=c(1,2), 
                             r=ncol(table))
    ##Second table
    current_page <- current_page + 1
    current_table_row <- current_table_row + 25
    current_end_row <- current_end_row + 25
    
    table2 <- tableGrob(mutation_table_db[current_table_row:current_end_row,], rows = NULL, theme = ttheme_default(base_size = 8))
    title2 <- textGrob(paste(gene_id, " genic mutations within ", population_name, " (Page ", current_page, " of ",total_pages, ")", sep = ""),gp=gpar(fontsize=12, fontface = "bold"))
    footnote <- textGrob("", x=0, hjust=0,
                         gp=gpar( fontface="italic"))
    padding <- unit(0.5,"line")
    table2 <- gtable_add_rows(table2, 
                              heights = grobHeight(title2) + padding,
                              pos = 0)
    table2 <- gtable_add_rows(table2, 
                              heights = grobHeight(footnote)+ padding)
    table2 <- gtable_add_grob(table2, list(title2, footnote),
                              t=c(1, nrow(table2)), l=c(1,2), 
                              r=ncol(table2))
    
    ##Third table
    current_page <- current_page + 1
    current_table_row <- current_table_row + 25
    current_end_row <- current_end_row + 25
    
    table3 <- tableGrob(mutation_table_db[current_table_row:current_end_row,], rows = NULL, theme = ttheme_default(base_size = 8))
    title3 <- textGrob(paste(gene_id, " genic mutations within ", population_name, " (Page ", current_page, " of ",total_pages, ")", sep = ""),gp=gpar(fontsize=12, fontface = "bold"))
    footnote <- textGrob("", x=0, hjust=0,
                         gp=gpar( fontface="italic"))
    padding <- unit(0.5,"line")
    table3 <- gtable_add_rows(table3, 
                              heights = grobHeight(title3) + padding,
                              pos = 0)
    table3 <- gtable_add_rows(table3, 
                              heights = grobHeight(footnote)+ padding)
    table3 <- gtable_add_grob(table3, list(title3, footnote),
                              t=c(1, nrow(table3)), l=c(1,2), 
                              r=ncol(table3))
    
    ##Last table
    current_page <- current_page + 1
    current_table_row <- current_table_row + 25
    current_end_row <- nrow(mutation_table_db)
    
    table_last <- tableGrob(mutation_table_db[current_table_row:current_end_row,], rows = NULL, theme = ttheme_default(base_size = 8))
    title_last <- textGrob(paste(gene_id, " genic mutations within ", population_name, " (Page ", current_page, " of ",total_pages, ")", sep = ""),gp=gpar(fontsize=12, fontface = "bold"))
    footnote <- textGrob("", x=0, hjust=0,
                         gp=gpar( fontface="italic"))
    padding <- unit(0.5,"line")
    table_last <- gtable_add_rows(table_last, 
                                  heights = grobHeight(title_last) + padding,
                                  pos = 0)
    table_last <- gtable_add_rows(table_last, 
                                  heights = grobHeight(footnote)+ padding)
    table_last <- gtable_add_grob(table_last, list(title_last, footnote),
                                  t=c(1, nrow(table_last)), l=c(1,2), 
                                  r=ncol(table_last))
    
    grid.newpage()
    return(c(grid.draw(table), grid.newpage(), grid.draw(table2), grid.newpage(), grid.draw(table3), 
             grid.newpage(), grid.draw(table_last)))
  } else if(total_pages >= 5){
    
    table <- tableGrob(mutation_table_db[current_table_row:current_end_row,], rows = NULL, theme = ttheme_default(base_size = 8))
    title <- textGrob(paste(gene_id, " genic mutations within ", population_name, " (Page ", current_page, " of ",total_pages, ")", sep = ""),gp=gpar(fontsize=12, fontface = "bold"))
    footnote <- textGrob("", x=0, hjust=0,
                         gp=gpar( fontface="italic"))
    padding <- unit(0.5,"line")
    table <- gtable_add_rows(table, 
                             heights = grobHeight(title) + padding,
                             pos = 0)
    table <- gtable_add_rows(table, 
                             heights = grobHeight(footnote)+ padding)
    table <- gtable_add_grob(table, list(title, footnote),
                             t=c(1, nrow(table)), l=c(1,2), 
                             r=ncol(table))
    ##Second table
    current_page <- current_page + 1
    current_table_row <- current_table_row + 25
    current_end_row <- current_end_row + 25
    
    table2 <- tableGrob(mutation_table_db[current_table_row:current_end_row,], rows = NULL, theme = ttheme_default(base_size = 8))
    title2 <- textGrob(paste(gene_id, " genic mutations within ", population_name, " (Page ", current_page, " of ",total_pages, ")", sep = ""),gp=gpar(fontsize=12, fontface = "bold"))
    footnote <- textGrob("", x=0, hjust=0,
                         gp=gpar( fontface="italic"))
    padding <- unit(0.5,"line")
    table2 <- gtable_add_rows(table2, 
                              heights = grobHeight(title2) + padding,
                              pos = 0)
    table2 <- gtable_add_rows(table2, 
                              heights = grobHeight(footnote)+ padding)
    table2 <- gtable_add_grob(table2, list(title2, footnote),
                              t=c(1, nrow(table2)), l=c(1,2), 
                              r=ncol(table2))
    
    ##Third table
    current_page <- current_page + 1
    current_table_row <- current_table_row + 25
    current_end_row <- current_end_row + 25
    
    table3 <- tableGrob(mutation_table_db[current_table_row:current_end_row,], rows = NULL, theme = ttheme_default(base_size = 8))
    title3 <- textGrob(paste(gene_id, " genic mutations within ", population_name, " (Page ", current_page, " of ",total_pages, ")", sep = ""),gp=gpar(fontsize=12, fontface = "bold"))
    footnote <- textGrob("", x=0, hjust=0,
                         gp=gpar( fontface="italic"))
    padding <- unit(0.5,"line")
    table3 <- gtable_add_rows(table3, 
                              heights = grobHeight(title3) + padding,
                              pos = 0)
    table3 <- gtable_add_rows(table3, 
                              heights = grobHeight(footnote)+ padding)
    table3 <- gtable_add_grob(table3, list(title3, footnote),
                              t=c(1, nrow(table3)), l=c(1,2), 
                              r=ncol(table3))
    
    ##Fourth table
    current_page <- current_page + 1
    current_table_row <- current_table_row + 25
    current_end_row <- current_end_row + 25
    
    table4 <- tableGrob(mutation_table_db[current_table_row:current_end_row,], rows = NULL, theme = ttheme_default(base_size = 8))
    title4 <- textGrob(paste(gene_id, " genic mutations within ", population_name, " (Page ", current_page, " of ",total_pages, ")", sep = ""),gp=gpar(fontsize=12, fontface = "bold"))
    footnote <- textGrob("", x=0, hjust=0,
                         gp=gpar( fontface="italic"))
    padding <- unit(0.5,"line")
    table4 <- gtable_add_rows(table4, 
                              heights = grobHeight(title4) + padding,
                              pos = 0)
    table4 <- gtable_add_rows(table4, 
                              heights = grobHeight(footnote)+ padding)
    table4 <- gtable_add_grob(table4, list(title4, footnote),
                              t=c(1, nrow(table4)), l=c(1,2), 
                              r=ncol(table4))
    ##Last table
    current_page <- current_page + 1
    current_table_row <- current_table_row + 25
    current_end_row <- nrow(mutation_table_db)
    
    table_last <- tableGrob(mutation_table_db[current_table_row:current_end_row,], rows = NULL, theme = ttheme_default(base_size = 8))
    title_last <- textGrob(paste(gene_id, " genic mutations within ", population_name, " (Page ", current_page, " of ",total_pages, ")", sep = ""),gp=gpar(fontsize=12, fontface = "bold"))
    footnote <- textGrob("", x=0, hjust=0,
                         gp=gpar( fontface="italic"))
    padding <- unit(0.5,"line")
    table_last <- gtable_add_rows(table_last, 
                                  heights = grobHeight(title_last) + padding,
                                  pos = 0)
    table_last <- gtable_add_rows(table_last, 
                                  heights = grobHeight(footnote)+ padding)
    table_last <- gtable_add_grob(table_last, list(title_last, footnote),
                                  t=c(1, nrow(table_last)), l=c(1,2), 
                                  r=ncol(table_last))
    
    grid.newpage()
    return(c(grid.draw(table), grid.newpage(), grid.draw(table2), grid.newpage(), grid.draw(table3), 
             grid.newpage(), grid.draw(table4), grid.newpage(),grid.draw(table_last)))
  }
}


##Calculate N samples for geno/pheno plots
give.n <- function(x){
  return(c(y = median(x) * 1.02, label = length(x)))
}

#create geno/pheno plots
create_geno_pheno_boxplot <- function(gene){
  
  effects_of_interest <- c("HIGH", "MODERATE")
  pheno_geno_table <- pre_mutation_db %>% filter(EFFECT %in% effects_of_interest & ID == gene)
  pheno_geno_table$PER_ALT <- NULL

  ##adjust metrics for counts for pheno data
  
  stat_box_data <- function(y, upper_limit = max(current_pheno_geno_table[[1]])) {
    return( 
      data.frame(
        y = 0.98 * upper_limit,
        label = paste('n =', length(y), '\n',
                      'mean =', round(mean(y), 1), '\n')))
  }
  
  if(dim(pheno_geno_table)[1] >= 1){
    genos_table <- as.data.frame(t(pheno_geno_table[,9:length(pheno_geno_table)]))
    genos_table2 <- data.frame(lapply(genos_table, function(x) {gsub(" ", "", x)}))
    genos_table2 <- data.frame(lapply(genos_table2, function(x) {gsub("0", "Ref/Ref", x)}))
    genos_table2 <- data.frame(lapply(genos_table2, function(x) {gsub("1", "Ref/Alt", x)}))
    genos_table2 <- data.frame(lapply(genos_table2, function(x) {gsub("2", "Alt/Alt", x)}))
    pheno_geno_table$names <- paste(pheno_geno_table$CHROM, pheno_geno_table$POS, pheno_geno_table$TYPE, sep = "_")
    colnames(genos_table2) <- t(pheno_geno_table$names)
    traits_to_graph <- colnames(genos_table2)
    
    genos_table_final <- cbind(PlantID=rownames(genos_table),genos_table2) 
    
    ##Merge variants with phenotypes, drop PlantIDs
    geno_pheno_full_table <- merge(phenotype, genos_table_final, by.x = 1, by.y = 1, all=F)
    geno_pheno_full_table[,1] <- NULL
    
    for(current_trait in traits_to_graph){
      
      ##pull data for current phenotype
      current_pheno_geno_table <- as.data.frame(cbind(geno_pheno_full_table[1], geno_pheno_full_table[current_trait]))
      current_pheno_geno_table <- current_pheno_geno_table[complete.cases(current_pheno_geno_table),]
      current_pheno_geno_table[[current_trait]] <- factor(current_pheno_geno_table[[current_trait]], levels = c("Ref/Ref",
                                                                                                                "Ref/Alt",
                                                                                                                "Alt/Alt"))
      current_pheno_geno_table <- current_pheno_geno_table[complete.cases(current_pheno_geno_table),]
      current_pheno_geno_table <- droplevels(current_pheno_geno_table)
      
      ##Run Anova if all three genotype states exist
      if(length(levels(current_pheno_geno_table[,2])) == 3){
        res.aov <- aov(current_pheno_geno_table[,1] ~ current_pheno_geno_table[,2])
        
        
        #make ANovA table
        Tukey_table <- TukeyHSD(res.aov, ordered = TRUE)
        pg_dt_tukey <- as.data.frame(Tukey_table$`current_pheno_geno_table[, 2]`)
        
        ##Make title for Tukey table
        title <- textGrob("TukeyHSD Multiple Pairwise-Comparions Summary",gp=gpar(fontsize=10), hjust=.4)
        padding <- unit(5,"mm")
        
        ##Make Tukey Table
        
        t1 <- tableGrob(pg_dt_tukey, theme = ttheme_default(base_size = 8)  )
        
        table <- gtable_add_rows(
          t1, 
          heights = grobHeight(title) + padding,
          pos = 0)
        table <- gtable_add_grob(
          table, 
          title, 
          1, 1, 1, ncol(table))
        
        ##residuals plot
        
        Model <- data.frame(Fitted = fitted(res.aov), 
                            Residuals = resid(res.aov), 
                            Treatment = current_pheno_geno_table[,2])
        
        res.model_plot <- ggplot(Model, aes(Fitted, Residuals, colour = Treatment)) + 
          geom_point() + ggtitle("Residuals vs Fitted") + theme_classic() + 
          theme(text = element_text(size=16), plot.title = element_text(hjust = 0.5)) 
        
        qq_plot <- ggplot(current_pheno_geno_table, aes(sample = current_pheno_geno_table[,1])) + 
          stat_qq() + stat_qq_line() + theme_classic() +  ggtitle("QQ-Plot") +  
          theme(text = element_text(size=16), plot.title = element_text(hjust = 0.5)) 
        
        
        ##Make pheno/geno boxplot
        x_name <- colnames(current_pheno_geno_table)[2]
        y_name <- colnames(current_pheno_geno_table)[1]
        pheno_stats <- table(current_pheno_geno_table[2])
        mycomparisons <- list(c("Ref/Ref", "Ref/Alt"), c("Ref/Ref", "Alt/Alt"), c("Ref/Alt", "Alt/Alt"))
        current_pheno_geno_table[,2] <- as.factor(current_pheno_geno_table[,2])
        current_pheno_geno_table[,1] <- as.numeric(current_pheno_geno_table[,1])
        current_pheno_geno_table
        p1 <- ggplot(data = current_pheno_geno_table, 
                     aes(x = current_pheno_geno_table[[2]], y = current_pheno_geno_table[[1]], 
                         fill = current_pheno_geno_table[[2]])) + geom_boxplot(alpha = .8) +
          geom_point(pch = 21, position = position_jitterdodge())
        
        p1 <- p1 + ylab(paste(y_name)) + xlab(paste(x_name)) + ggtitle(paste(gene)) +
          theme_classic() + theme(text = element_text(size=16), plot.title = element_text(hjust = 0.5), legend.position = "none") 
        p1 <- p1 + 
          stat_summary(
            fun.data = stat_box_data, 
            geom = "text", 
            hjust = 0.5,
            vjust = 0.9)
        
        print(grid.arrange(p1,table, res.model_plot, qq_plot, ncol = 2, clip = FALSE, 
                           widths = unit(c( .5, .5), "npc")))
      }
      
      ##Run t-test if only two allele states
      if(length(levels(current_pheno_geno_table[,2])) == 2){
        res.aov <- aov(current_pheno_geno_table[,1] ~ current_pheno_geno_table[,2])
        
        
        #make ANovA table
        Tukey_table <- TukeyHSD(res.aov, ordered = TRUE)
        pg_dt_tukey <- as.data.frame(Tukey_table$`current_pheno_geno_table[, 2]`)
        
        ##Make title for Tukey table
        title <- textGrob("TukeyHSD Multiple Pairwise-Comparions Summary",gp=gpar(fontsize=10), hjust=.4)
        padding <- unit(5,"mm")
        
        ##Make Tukey Table
        
        t1 <- tableGrob(pg_dt_tukey, theme = ttheme_default(base_size = 8))
        table <- gtable_add_rows(t1, heights = grobHeight(title) + padding, pos = 0)
        table <- gtable_add_grob(table, title, 1, 1, 1, ncol(table))
        
        ##residuals plot
        
        Model <- data.frame(Fitted = fitted(res.aov), 
                            Residuals = resid(res.aov), 
                            Treatment = current_pheno_geno_table[,2])
        
        res.model_plot <- ggplot(Model, aes(Fitted, Residuals, colour = Treatment)) + 
          geom_point() + ggtitle("Residuals vs Fitted") + theme_classic() + 
          theme(text = element_text(size=16), plot.title = element_text(hjust = 0.5)) 
        
        qq_plot <- ggplot(current_pheno_geno_table, aes(sample = current_pheno_geno_table[,1])) + 
          stat_qq() + stat_qq_line() + theme_classic() +  ggtitle("QQ-Plot") +  
          theme(text = element_text(size=16), plot.title = element_text(hjust = 0.5)) 
        
        ##Make pheno/geno boxplot
        x_name <- colnames(current_pheno_geno_table)[2]
        y_name <- colnames(current_pheno_geno_table)[1]
        pheno_stats <- table(current_pheno_geno_table[2])
        mycomparisons <- list(c("Ref/Ref", "Ref/Alt"), c("Ref/Ref", "Alt/Alt"), c("Ref/Alt", "Alt/Alt"))
        current_pheno_geno_table[,2] <- as.factor(current_pheno_geno_table[,2])
        current_pheno_geno_table[,1] <- as.numeric(current_pheno_geno_table[,1])
        current_pheno_geno_table
        p1 <- ggplot(data = current_pheno_geno_table, 
                     aes(x = current_pheno_geno_table[[2]], y = current_pheno_geno_table[[1]], 
                         fill = current_pheno_geno_table[[2]])) + geom_boxplot(alpha = .8) +
          geom_point(pch = 21, position = position_jitterdodge())
        
        p1 <- p1 + ylab(paste(y_name)) + xlab(paste(x_name)) + ggtitle(paste(gene)) +
          theme_classic() + theme(text = element_text(size=16), plot.title = element_text(hjust = 0.5), legend.position = "none") 
        p1 <- p1 + 
          stat_summary(
            fun.data = stat_box_data, 
            geom = "text", 
            hjust = 0.5,
            vjust = 0.9)
        
       print(grid.arrange(p1,table, res.model_plot, qq_plot, ncol = 2, clip = FALSE, 
                           widths = unit(c( .5, .5), "npc")))
      }
      
      ##If only one allele state exists in the geno/phenos
      if(length(levels(current_pheno_geno_table[,2])) == 1){
        ##Make pheno/geno boxplot
        x_name <- colnames(current_pheno_geno_table)[2]
        y_name <- colnames(current_pheno_geno_table)[1]
        pheno_stats <- table(current_pheno_geno_table[2])
        
        p1 <- ggplot(data = current_pheno_geno_table, 
                     aes(x=current_pheno_geno_table[[2]], y=current_pheno_geno_table[[1]], 
                         col = current_pheno_geno_table[[2]])) + geom_boxplot() + theme_classic() + 
          theme(legend.position = "none") + theme(text = element_text(size=16), plot.title = element_text(hjust = 0.5)) +
          xlab(paste(x_name)) + ylab(paste(y_name)) + 
          ggtitle(paste(gene)) + stat_summary(fun.data = give.n, geom = "text", size = 6, colour = "black", position = "identity")
        
        
        print(p1)
        
    }
    
}
  }
}

##get list of snp_targets

snp_targets <- list.files(path=".")

paste("Processing: ", snp_targets)

##read and process if phenotype data available
# test if there is at least one argument: if not, return an error
if (length(args)==1) {
  
  ##read in phenotype file
  phenotype_file <- args[1]
  path_to_pheno_file <- paste("../../../", phenotype_file, sep="")
  phenotype <- read.table(path_to_pheno_file, header = T, sep = "\t")
  
  #process all snps with phenotype info
  for(single_snp_target in snp_targets){
    
    path_to_target <- paste(single_snp_target,"/",single_snp_target,"_impactful_gene_hits.txt", sep="")
    
    ##make folders for each snp_target
    diversity_pdfs_specific <- paste("../../outputs/diversity_pdfs/", single_snp_target, sep = "")
    dir.create(diversity_pdfs_specific, showWarnings = F)
    
    
    ##Import mutations of interest and calculate mutation frequency
    pre_mutation_db <- read.table(path_to_target, sep = "\t", header = T)
    
    pre_mutation_db$ID <- gsub(x = pre_mutation_db$ID, pattern = transcript_trailer_to_remove, replacement = "")
    number_genos <- length(pre_mutation_db) - 9
    pre_mutation_db$PER_ALT = ((rowSums(pre_mutation_db[,9:length(pre_mutation_db)], na.rm = T) / 2 ) / number_genos ) * 100
    
    ##Initial filtering if desired 
    pre_mutation_db <- subset(pre_mutation_db, PER_ALT >= 1)

    ##Create and add additional columns for graphing
    mutation_db <- cbind(pre_mutation_db[,1:8],PER_ALT=pre_mutation_db$PER_ALT)
    mutation_db$size <- mutation_db$PER_ALT/10
    mutation_db$shape <- ifelse(mutation_db$TYPE=='missense_variant',21, 
                                ifelse(mutation_db$TYPE=='synonymous_variant',22, 
                                       ifelse(mutation_db$TYPE=='disruptive_inframe_deletion',23,25)))
    
    mutation_db_filt <- droplevels(mutation_db %>% filter(size > 0))
    mutation_db_filt$ID <- as.factor(mutation_db_filt$ID)
    
    
    ##Capture significant values for each gene tested
    output_db <- pre_mutation_db
    output_db$ID <- as.factor(output_db$ID)
    genes_of_interest <- levels(output_db$ID)
    
    
    
    ##create empty variant signficance data frame
    variant_sig_db <- data.frame()
    
    for(gene in genes_of_interest){
      effects_of_interest <- c("HIGH", "MODERATE")
      pheno_geno_table_sig <- pre_mutation_db %>% filter(EFFECT %in% effects_of_interest & ID == gene)
      if( nrow(pheno_geno_table_sig) >= 1){
      pheno_geno_table_sig$PER_ALT <- NULL
      
      
      genos_table_sig <- as.data.frame(t(pheno_geno_table_sig[,9:length(pheno_geno_table_sig)]))
      genos_table_sig2 <- data.frame(lapply(genos_table_sig, function(x) {gsub(" ", "", x)}))
      genos_table_sig2 <- data.frame(lapply(genos_table_sig2, function(x) {gsub("0", "Ref/Ref", x)}))
      genos_table_sig2 <- data.frame(lapply(genos_table_sig2, function(x) {gsub("1", "Ref/Alt", x)}))
      genos_table_sig2 <- data.frame(lapply(genos_table_sig2, function(x) {gsub("2", "Alt/Alt", x)}))
      pheno_geno_table_sig$names <- paste(pheno_geno_table_sig$CHROM, pheno_geno_table_sig$POS, pheno_geno_table_sig$TYPE, sep = "_")
      colnames(genos_table_sig2) <- t(pheno_geno_table_sig$names)
      traits_to_graph <- colnames(genos_table_sig2)
      
      genos_table_final_sig <- cbind(PlantID=rownames(genos_table_sig),genos_table_sig2) 
      
      ##Merge variants with phenotypes, drop PlantIDs
      geno_pheno_full_table_sig <- merge(phenotype, genos_table_final_sig, by.x = 1, by.y = 1, all=F)
      geno_pheno_full_table_sig[,1] <- NULL
      
      for(current_trait in traits_to_graph){
        
        ##pull data for current phenotype
        current_pheno_geno_table <- as.data.frame(cbind(geno_pheno_full_table_sig[1], geno_pheno_full_table_sig[current_trait]))
        current_pheno_geno_table <- current_pheno_geno_table[complete.cases(current_pheno_geno_table),]
        current_pheno_geno_table[[current_trait]] <- factor(current_pheno_geno_table[[current_trait]], levels = c("Ref/Ref",
                                                                                                                  "Ref/Alt",
                                                                                                                  "Alt/Alt"))
        current_pheno_geno_table <- current_pheno_geno_table[complete.cases(current_pheno_geno_table),]
        current_pheno_geno_table <- droplevels(current_pheno_geno_table)
        
        ##Run Anova if multiple genotype states exist
        if(length(levels(current_pheno_geno_table[,2])) > 1){
          res.aov <- aov(current_pheno_geno_table[,1] ~ current_pheno_geno_table[,2])
          
          ##Get number of samples for each combination
          n_sample_df <- as.data.frame(table(current_pheno_geno_table[,2]))
          n_sample_df_m <- t(n_sample_df[,2])
          colnames(n_sample_df_m) <- paste("n_",t(n_sample_df[,1]), sep="")
          
          #make ANovA table
          Tukey_table <- TukeyHSD(res.aov, ordered = TRUE)
          pg_dt_tukey <- as.data.frame(Tukey_table$`current_pheno_geno_table[, 2]`)
          
          ##Capture sig values for export
          temp_sig_pheno_db <- pg_dt_tukey
          temp_sig_pheno_db[,1:3] <- NULL
          current_sig_pheno_db <- as.data.frame(cbind(gene, current_trait, t(temp_sig_pheno_db), n_sample_df_m))
          names(current_sig_pheno_db) <- gsub(x = names(current_sig_pheno_db), pattern = "Alt/Alt-Ref/Ref", replacement = "Ref/Ref-Alt/Alt")  
          names(current_sig_pheno_db) <- gsub(x = names(current_sig_pheno_db), pattern = "Ref/Alt-Ref/Ref", replacement = "Ref/Ref-Ref/Alt")  
          names(current_sig_pheno_db) <- gsub(x = names(current_sig_pheno_db), pattern = "Alt/Alt-Ref/Alt", replacement = "Ref/Alt-Alt/Alt")  
          variant_sig_db <- plyr::rbind.fill(variant_sig_db, current_sig_pheno_db)
          
        }
      }
    }
    }
    ##Make summary output file
    ##make empty dataframe 
    
    odat <- data.frame()
    
    ##loop through and generate summary tables
    for( ID_sample in genes_of_interest){
      
      sub_db <- output_db %>% filter(ID == ID_sample)
      gene <- t(as.data.frame(table(sub_db$EFFECT)))
      colnames(gene) <- gene[1,]
      gene <- gene[-c(1),]
      gene <- t(as.data.frame(gene))
      
      types <- t(as.data.frame(table(sub_db$TYPE)))
      colnames(types) <- types[1,]
      types <- types[-c(1),]
      types <- t(as.data.frame(types))
      
      temp_df <- cbind(ID_sample, gene, types)
      odat <- rbind(odat, temp_df)
    }
    
    ##Reformat and make final tables for output
    colnames(variant_sig_db)[2] <- "SNP_target"
    variant_sig_db$`Ref/Ref-Alt/Alt` <- as.numeric(as.character(variant_sig_db$`Ref/Ref-Alt/Alt`))
    variant_sig_db$`Ref/Ref-Ref/Alt` <- as.numeric(as.character(variant_sig_db$`Ref/Ref-Ref/Alt`))
    variant_sig_db$`Ref/Alt-Alt/Alt` <- as.numeric(as.character(variant_sig_db$`Ref/Alt-Alt/Alt`))
    
    odat_sig_test_all <- data.frame()
    
    ##Get smallest PVAL for each gene tested
    
    for( gene_id in genes_of_interest){
    per_gene_variant_sig_db <- subset(variant_sig_db, subset = gene == gene_id)
    temp_min_sig_variant <- variant_sig_db[which.min(variant_sig_db$`Ref/Ref-Alt/Alt`),]
    odat_sig_test_all <- rbind(odat_sig_test_all, temp_min_sig_variant)
    }
     
    odat <- merge(odat, odat_sig_test_all, by.x = 1, by.y = 1, all.x = T, all.y = F)
    
    ##Write out summary table
    output_summary_name_with_path <- paste("../../outputs/summary_tables/", single_snp_target, "_summary_output.txt", sep = "")
    write.table(odat, output_summary_name_with_path, sep = "\t", row.names = F)
    
    ##Write out full significance table
    
    output_sig_name_with_path <- paste("../../outputs/summary_tables/", single_snp_target, "_TukeyLSD_significance_values.txt", sep = "")
    write.table(variant_sig_db, output_sig_name_with_path, sep = "\t", row.names = F)
    
    mutation_db_filt$ID
    ##Create one file for gene of interest
    for(gene in levels(mutation_db_filt$ID)){
      pdf_name <- paste(gene,"diversity_summary.pdf", sep = "_")
      pdf(paste(diversity_pdfs_specific, "/", pdf_name, sep = ""), onefile = TRUE, width = 12)
      print(single_gene_model_mutations(gene))
      print(make_gene_mutation_table(gene))
      geneid <- strsplit(gene, split = "[.][1-9]", fixed = FALSE, perl = FALSE)
      print(create_geno_pheno_boxplot(gene))
      dev.off()
    }
  }
  
  } else if (length(args)==0) {
    #process all snps without phenotype info
    for(single_snp_target in snp_targets){
      
      path_to_target <- paste(single_snp_target,"/",single_snp_target,"_impactful_gene_hits.txt", sep="")
      
      ##make folders for each snp_target
      diversity_pdfs_specific <- paste("../../outputs/diversity_pdfs/", single_snp_target, sep = "")
      dir.create(diversity_pdfs_specific)
      
      
      ##Import mutations of interest and calculate mutation frequency
      pre_mutation_db <- read.table(path_to_target, sep = "\t", header = T)
      
      pre_mutation_db$ID <- gsub(x = pre_mutation_db$ID, pattern = transcript_trailer_to_remove, replacement = "")
      number_genos <- length(pre_mutation_db) - 9
      pre_mutation_db$PER_ALT = ((rowSums(pre_mutation_db[,9:length(pre_mutation_db)], na.rm = T) / 2 ) / number_genos ) * 100
      
      
      ##Create and add additional columns for graphing
      mutation_db <- cbind(pre_mutation_db[,1:8],PER_ALT=pre_mutation_db$PER_ALT)
      mutation_db$size <- mutation_db$PER_ALT/10
      mutation_db$shape <- ifelse(mutation_db$TYPE=='missense_variant',21, 
                                  ifelse(mutation_db$TYPE=='synonymous_variant',22, 
                                         ifelse(mutation_db$TYPE=='disruptive_inframe_deletion',23,25)))
      
      mutation_db_filt <- droplevels(mutation_db %>% filter(size > 0))
      mutation_db_filt$ID <- as.factor(mutation_db_filt$ID)
      
      ##Make summary output file
      ##make empty dataframe 
      
      odat <- data.frame()
      
      output_db <- pre_mutation_db
      output_db$ID <- as.factor(output_db$ID)
      genes_of_interest <- levels(output_db$ID)
      
      ##loop through and generate summary tables
      for( ID_sample in genes_of_interest){
        
        sub_db <- output_db %>% filter(ID == ID_sample)
        gene <- t(as.data.frame(table(sub_db$EFFECT)))
        colnames(gene) <- gene[1,]
        gene <- gene[-c(1),]
        gene <- t(as.data.frame(gene))
        
        types <- t(as.data.frame(table(sub_db$TYPE)))
        colnames(types) <- types[1,]
        types <- types[-c(1),]
        types <- t(as.data.frame(types))
        
        temp_df <- cbind(ID_sample, gene, types)
        odat <- rbind(odat, temp_df)
      }
      
      output_summary_name_with_path <- paste("../../outputs/summary_tables/", single_snp_target, "_summary_output.txt", sep = "")
      write.table(odat, output_summary_name_with_path, sep = "\t", row.names = F)
      
      
      
      ##Create one file for gene of interest
      for(gene in levels(mutation_db_filt$ID)){
        pdf_name <- paste(gene,"diversity_summary.pdf", sep = "_")
        pdf(paste(diversity_pdfs_specific, "/", pdf_name, sep = ""), onefile = TRUE, width = 12)
        print(single_gene_model_mutations(gene))
        print(make_gene_mutation_table(gene))
        dev.off()
      }
    }
}

#merge output tables for master table
all_summary_tables_list <- list.files(path = "../../outputs/summary_tables/.", pattern = "summary_output.txt")
all_sig_tables_list <- list.files(path = "../../outputs/summary_tables/.", pattern = "significance_values.txt")

##Create blank data frame for master table
master_table <- data.frame()
master_sig_table <- data.frame()

##Loop through existings summary tables and merge master
for( summary_table_single in all_summary_tables_list){
  SNP_Hit_ID <- gsub(x = summary_table_single, pattern = "_summary_output.txt", replacement = "")
  current_table <- read.table(paste("../../outputs/summary_tables/", summary_table_single, sep=""), header = T, sep = "\t")
  Gene_ID <- str_replace(pattern = individual_transcript_identifier, replacement = "", string = current_table$ID_sample)
  current_table <- cbind(SNP_Hit_ID, Gene_ID, current_table)
  master_table <- bind_rows(master_table, current_table)
  }

##Loop through existings sig tables and merge master
for( summary_table_single in all_sig_tables_list){
  SNP_Hit_ID <- gsub(x = summary_table_single, pattern = "_TukeyLSD_significance_values.txt", replacement = "")
  current_table <- read.table(paste("../../outputs/summary_tables/", summary_table_single, sep=""), header = T, sep = "\t")
  current_table
  Gene_ID <- str_replace(pattern = individual_transcript_identifier, replacement = "", string = current_table$gene)
  current_table <- cbind(SNP_Hit_ID, Gene_ID, current_table)
  master_sig_table <- bind_rows(master_sig_table, current_table)
}

#names(master_sig_table)[3] <- "Transcript"
#names(master_table)[3] <- "Transcript"

names(master_sig_table)[3] <- "gene"
names(master_table)[3] <- "gene"


master_sig_table <- unique.data.frame(master_sig_table)
master_table <- unique.data.frame(master_table)

bonf_thresh <- 0.5 / nrow(master_sig_table)
master_sig_table <- cbind(master_sig_table[,1:4], bonf_thresh, master_sig_table[5:length(master_sig_table)])
master_sig_table <- transform(master_sig_table, sig_hit = pmin(Ref.Ref.Alt.Alt, Ref.Alt.Alt.Alt, Ref.Ref.Ref.Alt,na.rm = T))
master_sig_table$sig_hit[master_sig_table$sig_hit <= master_sig_table$bonf_thresh] <- "*"
master_sig_table$sig_hit[master_sig_table$sig_hit > master_sig_table$bonf_thresh] <- "-"


##write final outputs
final_output <- merge(master_table, annotation_db, by.x = "Transcript", by.y = "transcriptName", all.x = T, all.y = F)
final_output <- unique.data.frame(final_output)
write.csv(final_output, "../All_queries_gene_summary_table.csv", row.names = F)


##sort and write sig table if there were hits
if( nrow(master_sig_table) >= 1){
master_sig_table <- master_sig_table[order(master_sig_table$sig_hit, decreasing = T),]
master_sig_table <- unique.data.frame(master_sig_table)
write.csv(master_sig_table, "../All_queries_gene_pheno_significance.csv", row.names = F)
}


